/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ContentPoolInterface extends utils.Interface {
  functions: {
    "addUserShare(address,uint256)": FunctionFragment;
    "computeRewardForUser(uint256)": FunctionFragment;
    "removeUserShare(address,uint256)": FunctionFragment;
    "withdrawFounds(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUserShare"
      | "computeRewardForUser"
      | "removeUserShare"
      | "withdrawFounds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUserShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRewardForUser",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFounds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUserShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRewardForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFounds",
    data: BytesLike
  ): Result;

  events: {
    "PoolParticipantAdded(uint256,address)": EventFragment;
    "PoolParticipantRemoved(uint256,address)": EventFragment;
    "PoolParticipantShareUpdated(uint256,address,uint256)": EventFragment;
    "PoolProvisionned(uint256,uint256)": EventFragment;
    "PoolWithdraw(uint256,address,uint256)": EventFragment;
    "ReferralRewardWithdrawed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolParticipantAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolParticipantRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolParticipantShareUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolProvisionned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRewardWithdrawed"): EventFragment;
}

export interface PoolParticipantAddedEventObject {
  podcastId: BigNumber;
  user: string;
}
export type PoolParticipantAddedEvent = TypedEvent<
  [BigNumber, string],
  PoolParticipantAddedEventObject
>;

export type PoolParticipantAddedEventFilter =
  TypedEventFilter<PoolParticipantAddedEvent>;

export interface PoolParticipantRemovedEventObject {
  podcastId: BigNumber;
  user: string;
}
export type PoolParticipantRemovedEvent = TypedEvent<
  [BigNumber, string],
  PoolParticipantRemovedEventObject
>;

export type PoolParticipantRemovedEventFilter =
  TypedEventFilter<PoolParticipantRemovedEvent>;

export interface PoolParticipantShareUpdatedEventObject {
  podcastId: BigNumber;
  user: string;
  share: BigNumber;
}
export type PoolParticipantShareUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PoolParticipantShareUpdatedEventObject
>;

export type PoolParticipantShareUpdatedEventFilter =
  TypedEventFilter<PoolParticipantShareUpdatedEvent>;

export interface PoolProvisionnedEventObject {
  podcastId: BigNumber;
  amount: BigNumber;
}
export type PoolProvisionnedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolProvisionnedEventObject
>;

export type PoolProvisionnedEventFilter =
  TypedEventFilter<PoolProvisionnedEvent>;

export interface PoolWithdrawEventObject {
  podcastId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type PoolWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PoolWithdrawEventObject
>;

export type PoolWithdrawEventFilter = TypedEventFilter<PoolWithdrawEvent>;

export interface ReferralRewardWithdrawedEventObject {
  user: string;
  amount: BigNumber;
}
export type ReferralRewardWithdrawedEvent = TypedEvent<
  [string, BigNumber],
  ReferralRewardWithdrawedEventObject
>;

export type ReferralRewardWithdrawedEventFilter =
  TypedEventFilter<ReferralRewardWithdrawedEvent>;

export interface ContentPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContentPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUserShare(
      user: PromiseOrValue<string>,
      shareToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeRewardForUser(
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeUserShare(
      user: PromiseOrValue<string>,
      shareToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFounds(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addUserShare(
    user: PromiseOrValue<string>,
    shareToAdd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeRewardForUser(
    rewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeUserShare(
    user: PromiseOrValue<string>,
    shareToRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFounds(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addUserShare(
      user: PromiseOrValue<string>,
      shareToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeRewardForUser(
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeUserShare(
      user: PromiseOrValue<string>,
      shareToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFounds(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolParticipantAdded(uint256,address)"(
      podcastId?: null,
      user?: null
    ): PoolParticipantAddedEventFilter;
    PoolParticipantAdded(
      podcastId?: null,
      user?: null
    ): PoolParticipantAddedEventFilter;

    "PoolParticipantRemoved(uint256,address)"(
      podcastId?: null,
      user?: null
    ): PoolParticipantRemovedEventFilter;
    PoolParticipantRemoved(
      podcastId?: null,
      user?: null
    ): PoolParticipantRemovedEventFilter;

    "PoolParticipantShareUpdated(uint256,address,uint256)"(
      podcastId?: null,
      user?: null,
      share?: null
    ): PoolParticipantShareUpdatedEventFilter;
    PoolParticipantShareUpdated(
      podcastId?: null,
      user?: null,
      share?: null
    ): PoolParticipantShareUpdatedEventFilter;

    "PoolProvisionned(uint256,uint256)"(
      podcastId?: null,
      amount?: null
    ): PoolProvisionnedEventFilter;
    PoolProvisionned(
      podcastId?: null,
      amount?: null
    ): PoolProvisionnedEventFilter;

    "PoolWithdraw(uint256,address,uint256)"(
      podcastId?: null,
      user?: null,
      amount?: null
    ): PoolWithdrawEventFilter;
    PoolWithdraw(
      podcastId?: null,
      user?: null,
      amount?: null
    ): PoolWithdrawEventFilter;

    "ReferralRewardWithdrawed(address,uint256)"(
      user?: null,
      amount?: null
    ): ReferralRewardWithdrawedEventFilter;
    ReferralRewardWithdrawed(
      user?: null,
      amount?: null
    ): ReferralRewardWithdrawedEventFilter;
  };

  estimateGas: {
    addUserShare(
      user: PromiseOrValue<string>,
      shareToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeRewardForUser(
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeUserShare(
      user: PromiseOrValue<string>,
      shareToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFounds(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUserShare(
      user: PromiseOrValue<string>,
      shareToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeRewardForUser(
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeUserShare(
      user: PromiseOrValue<string>,
      shareToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFounds(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
